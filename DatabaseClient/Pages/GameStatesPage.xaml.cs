using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using DatabaseClient.Annotations;
using DatabaseClient.Windows;

namespace DatabaseClient.Pages
{
    /// <summary>
    /// Interaction logic for GameStatesPage.xaml
    /// </summary>
    public partial class GameStatesPage : Page, INotifyPropertyChanged
    {

        public ObservableCollection<GameState> GameStates { get; set; }
        public GameStatesPage()
        {
            InitializeComponent();
            Loaded += OnLoaded;
        }

        private async void OnLoaded(object sender, RoutedEventArgs routedEventArgs)
        {
            await UpdateGameStates();
        }

        private async void CreateGamestateButtonClick(object sender, RoutedEventArgs e)
        {
            var createNewGameStateWindows = new CreateNewGameStateWindow();
            createNewGameStateWindows.ShowDialog();
            await UpdateGameStates();
        }

        private async void DeleteGamestateButtonClick(object sender, RoutedEventArgs e)
        {
            if (GameStateDataGrid.SelectedIndex >= 0)
            {
                var index = GameStateDataGrid.SelectedIndex;
                var id = GameStates[index].Id;
                await WebConnection.DeleteGameState(id);
                await UpdateGameStates();
            }
        }

        private async void RefreshButtonClick(object sender, RoutedEventArgs e)
        {
            await UpdateGameStates();
        }

        private void GamestateDataGrid_OnAutoGeneratedColumns(object sender, EventArgs e)
        {
            GameStateDataGrid.Columns[0].IsReadOnly = true;
        }

        private void GamestateDataGrid_OnCellEditEnding(object sender, DataGridCellEditEndingEventArgs e)
        {
            if (e.EditAction == DataGridEditAction.Commit)
            {
                Debug.WriteLine("changed a value");
            }   
        }

        private async Task UpdateGameStates()
        {
            var newUsers = await WebConnection.GetAllGameStates();
            GameStates = new ObservableCollection<GameState>(newUsers);
            OnPropertyChanged(nameof(GameStates));
        }


        #region PropertyChanged
        public event PropertyChangedEventHandler PropertyChanged;

        [NotifyPropertyChangedInvocator]
        protected virtual void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        #endregion

    }
}
