using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using DatabaseClient.Annotations;
using DatabaseClient.Windows;

namespace DatabaseClient.Pages
{
    /// <summary>
    /// Interaction logic for UsersPage.xaml
    /// </summary>
    public partial class UsersPage : Page, INotifyPropertyChanged
    {
        public ObservableCollection<User> Users { get; set; }
        public UsersPage()
        {
            InitializeComponent();
            Loaded += OnLoaded;
        }

        private async void OnLoaded(object sender, RoutedEventArgs routedEventArgs)
        {
            await UpdateUsers();
        }

        private async void DeleteUserButtonClick(object sender, RoutedEventArgs e)
        {
            if(UserDataGrid.SelectedIndex>= 0)
            {
                var index = UserDataGrid.SelectedIndex;
                var id = Users[index].Id;
                await WebConnection.DeleteUser(id);
                await UpdateUsers();
            }
        }

        private async void CreateUserButtonClick(object sender, RoutedEventArgs e)
        {
            var createUserWindow = new CreateNewUserWindow();
            createUserWindow.ShowDialog();
            await UpdateUsers();
        }

        private async void RefreshButtonClick(object sender, RoutedEventArgs e)
        {
            await UpdateUsers();
        }

        private void UserDataGrid_OnAutoGeneratedColumns(object sender, EventArgs e)
        {
            UserDataGrid.Columns[0].IsReadOnly = true;
        }
        private async void UserDataGrid_OnRowEditEnding(object sender, DataGridRowEditEndingEventArgs e)
        {
            if (e.EditAction == DataGridEditAction.Commit)
            {
                Debug.WriteLine("changed a value");
                //await UpdateUsers();
            }
        }

        private async Task UpdateUsers()
        {
            var newUsers = await WebConnection.GetAllUsers();
            Users = new ObservableCollection<User>(newUsers);
            OnPropertyChanged(nameof(Users));
        }


#region PropertyChanged
        public event PropertyChangedEventHandler PropertyChanged;

        [NotifyPropertyChangedInvocator]
        protected virtual void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
#endregion
    }
}
